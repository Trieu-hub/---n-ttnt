# recommender.py (S·ª≠a & ho√†n ch·ªânh)
from flask import Flask, jsonify, request
import pandas as pd
from flask_cors import CORS
from surprise import Dataset, Reader, SVD
import os
from datetime import datetime

app = Flask(__name__)
CORS(app)

CSV_PATH = "dataset.csv"
# =======================================
# üîß H√ÄM LOAD V√Ä TRAIN MODEL CF
# =======================================
def load_and_train():
    """
    ƒê·ªçc dataset t·ª´ CSV, chu·∫©n h√≥a c√°c c·ªôt c∆° b·∫£n v√† train SVD
    Tr·∫£ v·ªÅ: (df, algo) - algo=None n·∫øu kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ train
    """
    if not os.path.exists(CSV_PATH):
        # Tr·∫£ DataFrame r·ªóng c√πng algo None n·∫øu ch∆∞a c√≥ file
        empty_cols = ["student_id", "year", "semester", "course_id", "course_name", "rating", "faculty_id", "status"]
        return pd.DataFrame(columns=empty_cols), None

    df_local = pd.read_csv(CSV_PATH, encoding="utf-8")

    # ƒê·∫£m b·∫£o c√°c c·ªôt t·ªìn t·∫°i
    required_cols = ["student_id", "course_id", "course_name", "rating", "faculty_id", "year", "status"]
    for col in required_cols:
        if col not in df_local.columns:
            df_local[col] = None

    # Chu·∫©n h√≥a c·ªôt
    df_local["student_id"] = df_local["student_id"].astype(str)
    df_local["faculty_id"] = df_local["faculty_id"].astype(str)
    df_local["course_id"] = df_local["course_id"].astype(str)
    df_local["course_name"] = df_local["course_name"].astype(str)
    df_local["status"] = df_local["status"].fillna("not_started").astype(str)
    df_local["rating"] = pd.to_numeric(df_local["rating"], errors="coerce").fillna(0.0)
    # year c√≥ th·ªÉ float trong CSV, √©p v·ªÅ int n·∫øu c√≥ th·ªÉ
    try:
        df_local["year"] = pd.to_numeric(df_local["year"], errors="coerce").fillna(0).astype(int)
    except:
        df_local["year"] = df_local["year"].fillna(0)

    # Train ch·ªâ tr√™n c√°c b·∫£n ghi marked 'completed' (ƒë√£ c√≥ rating h·ª£p l·ªá)
    train_df = df_local[df_local["status"].astype(str).str.lower() == "completed"]

    if train_df.empty or len(train_df) < 2:
        # N·∫øu ch∆∞a c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ train th√¨ tr·∫£ dataset chu·∫©n h√≥a v√† algo None
        print("‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu completed ƒë·ªß ƒë·ªÉ train model CF.")
        return df_local, None

    try:
        reader = Reader(rating_scale=(0, 5))
        data = Dataset.load_from_df(train_df[["student_id", "course_id", "rating"]], reader)
        trainset = data.build_full_trainset()
        algo = SVD()
        algo.fit(trainset)
        print("‚úÖ ƒê√£ train model CF th√†nh c√¥ng.")
        return df_local, algo
    except Exception as e:
        print("‚ö†Ô∏è L·ªói khi train CF:", e)
        return df_local, None


# =======================================
# üöÄ KH·ªûI T·∫†O BI·∫æN TO√ÄN C·ª§C (ngo√†i h√†m)
# =======================================
if os.environ.get("WERKZEUG_RUN_MAIN") == "true":
    df, algo = load_and_train()
else:
    df, algo = pd.DataFrame(), None



# =======================================
# üè† HOME ROUTE
# =======================================
@app.route("/")
def home():
    return "‚úÖ Flask API - G·ª£i √Ω m√¥n h·ªçc (Realtime Update)"


# =======================================
# üéØ HELPER: x√°c ƒë·ªãnh start_year & h·ªçc nƒÉm hi·ªán t·∫°i t·ª´ MSSV
# =======================================
def parse_start_year_from_mssv(sid):
    """
    L·∫•y 2 ch·ªØ s·ªë ƒë·∫ßu trong MSSV ƒë·ªÉ suy start year (v√≠ d·ª• '248...' -> '24' -> 2024).
    N·∫øu kh√¥ng parse ƒë∆∞·ª£c, fallback v·ªÅ current year.
    """
    digits = ''.join(ch for ch in str(sid) if ch.isdigit())
    if len(digits) >= 2:
        try:
            yy = int(digits[:2])
            start = 2000 + yy
            if 2000 <= start <= 2099:
                return start
        except:
            pass
    return datetime.now().year


def compute_student_year_from_start(start_year):
    """
    T·ª´ start_year (v√≠ d·ª• 2024) -> compute academic year (1..4) theo current year
    """
    current_year = datetime.now().year
    student_year = current_year - start_year + 1
    if student_year < 1:
        student_year = 1
    if student_year > 4:
        student_year = 4
    return student_year


# =======================================
# üéØ API: G·ª¢I √ù M√îN H·ªåC
# =======================================
@app.route("/recommend/<student_id>/<faculty_id>", defaults={"year": None})
@app.route("/recommend/<student_id>/<faculty_id>/<year>")
def recommend(student_id, faculty_id, year):
    global df, algo

    # ƒê·ªçc l·∫°i CSV ƒë·ªÉ lu√¥n ƒë·ªìng b·ªô v·ªõi thay ƒë·ªïi m·ªõi nh·∫•t
    if not os.path.exists(CSV_PATH):
        return jsonify({"error": "Kh√¥ng t√¨m th·∫•y file dataset.csv"}), 404
    df = pd.read_csv(CSV_PATH, encoding="utf-8")

    # Chu·∫©n h√≥a c·ªôt cho an to√†n
    df["student_id"] = df["student_id"].astype(str)
    df["faculty_id"] = df["faculty_id"].astype(str)
    df["course_id"] = df["course_id"].astype(str)
    if "course_name" not in df.columns:
        df["course_name"] = df["course_id"]
    df["course_name"] = df["course_name"].astype(str)
    if "status" not in df.columns:
        df["status"] = "not_started"
    df["status"] = df["status"].fillna("not_started").astype(str)
    if "year" in df.columns:
        df["year"] = pd.to_numeric(df["year"], errors="coerce").fillna(0).astype(int)
    else:
        df["year"] = 0

    # chu·∫©n input
    student_id = str(student_id).strip()
    faculty_id = str(faculty_id).strip().upper()

    # x√°c ƒë·ªãnh start_year v√† student_year t·ª´ MSSV
    start_year = parse_start_year_from_mssv(student_id)
    student_year = compute_student_year_from_start(start_year)

    # L·ªçc theo faculty
    # =======================================
    # üéØ L·ªåC D·ªÆ LI·ªÜU THEO KHOA & NƒÇM
    # =======================================
    filtered = df[df["faculty_id"].fillna("").astype(str).str.upper() == faculty_id.upper()]

    # ∆Øu ti√™n nƒÉm ƒë∆∞·ª£c truy·ªÅn ho·∫∑c nƒÉm h·ªçc hi·ªán t·∫°i
    if year:
        try:
            filtered = filtered[filtered["year"].astype(float) == float(year)]
        except:
            pass
    else:
        try:
            same_year = filtered[filtered["year"].astype(float) == float(student_year)]
            if not same_year.empty:
                filtered = same_year
        except:
            pass

    # N·∫øu r·ªóng -> fallback to√†n khoa
    if filtered.empty:
        filtered = df[df["faculty_id"].fillna("").astype(str).str.upper() == faculty_id.upper()]

    # ‚úÖ Kh√¥ng l·ªçc b·ªè completed ·ªü ƒë√¢y
    # V√¨ ta v·∫´n c·∫ßn completed ƒë·ªÉ bi·∫øt sinh vi√™n ƒë√£ h·ªçc g√¨


    # map id -> name
    course_map = dict(zip(filtered["course_id"].astype(str), filtered["course_name"].astype(str)))

    # ki·ªÉm tra student t·ªìn t·∫°i trong dataset
    student_exists = student_id.upper() in df["student_id"].astype(str).str.upper().unique()

    # n·∫øu ch∆∞a c√≥ student th√¨ th√™m c√°c m√¥n (not_started) cho student ƒë√≥ (d·ª±a v√†o filtered)
    if not student_exists:
        courses_for_new = filtered.copy()
        if courses_for_new.empty:
            # fallback: l·∫•y t·∫•t c·∫£ c√°c m√¥n
            courses_for_new = df.copy()

        new_rows = []
        for _, row in courses_for_new.iterrows():
            new_rows.append({
                "student_id": student_id,
                "year": int(row.get("year") if pd.notna(row.get("year")) else student_year),
                "semester": row.get("semester", 1),
                "course_id": str(row.get("course_id")),
                "course_name": str(row.get("course_name", "")),
                "rating": 0.0,
                "faculty_id": faculty_id,
                "status": "not_started"
            })

        if new_rows:
            new_df = pd.DataFrame(new_rows)
            df = pd.concat([df, new_df], ignore_index=True)
            # l∆∞u l·∫°i CSV v√† retrain
            df.to_csv(CSV_PATH, index=False, encoding="utf-8")
            df, algo = load_and_train()

    # L·∫•y danh s√°ch m√¥n ƒë√£ completed c·ªßa student trong khoa
    taken_mask = (
        (df["student_id"].astype(str).str.upper() == student_id.upper()) &
        (df["faculty_id"].astype(str).str.upper() == faculty_id.upper()) &
        (df["status"].astype(str).str.lower() == "completed")
    )
    taken_courses = df.loc[taken_mask, "course_id"].astype(str).tolist()
    # ƒë·ªïi sang t√™n ƒë·ªÉ frontend hi·ªÉn th·ªã
    taken_names = [course_map.get(cid, cid) for cid in taken_courses]

    # N·∫øu ch∆∞a c√≥ model (algo None) th√¨ fallback tr·∫£ 5 m√¥n ch∆∞a h·ªçc (object list)
    # N·∫øu ch∆∞a c√≥ model (algo None) th√¨ fallback tr·∫£ 5 m√¥n ch∆∞a h·ªçc (object list)
    if algo is None:
    # Hi·ªÉn th·ªã t·∫•t c·∫£ m√¥n ch∆∞a completed
        available = filtered[~filtered["course_id"].isin(taken_courses)]
        recommend_names = available[["course_id", "course_name"]].head(10)
        recommend_list = recommend_names.to_dict(orient="records")
        return jsonify({
            "student_id": student_id,
            "auto_year_detected": student_year,
            "start_year": start_year,
            "recommendations": recommend_list,
            "taken": taken_names
        })

    # N·∫øu c√≥ model, d·ª± ƒëo√°n score cho m·ªói course ch∆∞a h·ªçc
    available_ids = filtered[filtered["status"].astype(str).str.lower() != "completed"]["course_id"].astype(str).unique()
    predictions = []
    for cid in available_ids:
        if cid not in taken_courses:
            try:
                pred = algo.predict(student_id, cid)
                est = float(pred.est) if hasattr(pred, "est") else None
                if est is not None:
                    predictions.append((cid, course_map.get(cid, cid), est))
            except Exception:
                # n·∫øu model kh√¥ng th·ªÉ d·ª± ƒëo√°n (vd student unseen), b·ªè qua
                continue

    # s·∫Øp x·∫øp theo estimate desc
    predictions.sort(key=lambda x: x[2], reverse=True)

    # tr·∫£ t·ªëi ƒëa 10 k·∫øt qu·∫£ (frontend ch·ªâ l·∫•y 5 ho·∫∑c render t√πy)
    recommend_objs = []
    for cid, cname, score in predictions[:10]:
        recommend_objs.append({"course_id": cid, "course_name": cname, "score": round(score, 3)})

    return jsonify({
        "student_id": student_id,
        "auto_year_detected": student_year,
        "start_year": start_year,
        "recommendations": recommend_objs,
        "taken": taken_names
    })


# =======================================
# üßæ API: C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI M√îN H·ªåC
# =======================================
@app.route("/update_status/<student_id>/<course_id>/<new_status>", methods=["POST"])
def update_status(student_id, course_id, new_status):
    global df, algo

    if not os.path.exists(CSV_PATH):
        return jsonify({"error": "Kh√¥ng t√¨m th·∫•y file dataset.csv"}), 404

    # ƒê·ªçc file m·ªõi nh·∫•t
    df = pd.read_csv(CSV_PATH, encoding="utf-8")

    # Chu·∫©n h√≥a c·ªôt
    df["student_id"] = df["student_id"].astype(str)
    df["faculty_id"] = df["faculty_id"].astype(str)
    df["course_id"] = df["course_id"].astype(str)
    if "status" not in df.columns:
        df["status"] = "not_started"
    df["status"] = df["status"].fillna("not_started").astype(str)

    # Chu·∫©n h√≥a input
    student_id_u = str(student_id).upper().strip()
    course_id_u = str(course_id).upper().strip()
    new_status_clean = str(new_status).lower().strip()

    # T√¨m mask v√† c·∫≠p nh·∫≠t
    mask = (
        (df["student_id"].astype(str).str.upper() == student_id_u) &
        (df["course_id"].astype(str).str.upper() == course_id_u)
    )

    if mask.sum() == 0:
        return jsonify({"error": "Kh√¥ng t√¨m th·∫•y m√¥n h·ªçc c·ªßa sinh vi√™n n√†y"}), 404

    df.loc[mask, "status"] = new_status_clean

    # L∆∞u l·∫°i file v√† retrain
    df.to_csv(CSV_PATH, index=False, encoding="utf-8")
    df, algo = load_and_train()

    # Tr·∫£ v·ªÅ d·ªØ li·ªáu m·ªõi nh·∫•t c·ªßa sinh vi√™n ƒë·ªÉ frontend render ngay
    student_data = df[df["student_id"].astype(str).str.upper() == student_id_u].to_dict(orient="records")

    return jsonify({
        "message": f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t {course_id_u} c·ªßa {student_id_u} th√†nh '{new_status_clean}' v√† retrain model.",
        "updated_courses": student_data
    })


# =======================================
# üöÄ CH·∫†Y SERVER 
# =======================================
if __name__ == "__main__":
    # Khi Flask b·∫≠t debug, n√≥ s·∫Ω t·ª± restart -> ta ch·ªâ mu·ªën train ·ªü l·∫ßn ch√≠nh
    if os.environ.get("WERKZEUG_RUN_MAIN") == "true":
        print("üöÄ Flask ƒëang ch·∫°y ch√≠nh th·ª©c, model ƒë√£ s·∫µn s√†ng.")
    else:
        print("üß© Flask kh·ªüi ƒë·ªông reloader, b·ªè qua train model.")
    
    app.run(debug=True, use_reloader=True)
